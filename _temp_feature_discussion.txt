code layout decisions -------------------------------

no typehits on top-level functions
    - typehins can look confusing when one is not used to them
    - typical engineering users will have little experince
    - numpy does not use typehints

discussion -----------------------------------------

- global magnetization ?
    - src.mag=(xxx, localMag=True)
    - src = Box(mag,pos,dim,...,local_mag=True)

- pylance problem to resolve scipy...Rotation in scipy 1.6


2do ----------------------------------------------------------
- input checks: keep only most critical


- is it possible to get rid of (pm,steps=...) argument in motion_merge

- display: adjust system size to shifted system
- display: showpath='all'
- display: graphic defaults to config

- testing code coverage -> 100

- code: apply .reshape((-1,3))
- code: numpy reshape and other operations creating copies

- path_merge: change name from motion_merge
- path_merge: context manager tool tip not displaying

- utility: check_dupicates might destroy col.sources order

- bring edgesize in context with magnetsize

- docu: __init__ docstrings providing brief overviews
- docu: docstring like scipy
- docu: REWORK DOKU
    - link to references / citations
    - 

- dissem: integrate with NumFocus

- performance: profile getBH

- math: cel function
        - properly clean up celv
        - provide faster E,K and Pi alternatives
        - provide algorithms for incomplete el for Cylinder tiles !!!

- math: box stability problem
        - np.log options/alternatives function ?

- tests: H testing against FEM

- code: add remaining sources
	- sphere
	- currents
	- dipole moment
- code add new sources
    - cone
    - arc
    - tile
    - raida source

- errors:
    - throw errors instead of warning+sys.exit()
    - sys.exit(ERROR), doesnt give you a traceback ! such errors are more difficult to track down
    - return error codes
    - write tests for errors
    - unify error msg format

code: .misc package
    - Dipole
    - FEM interpolation
    - Virtual field (just a function)

- potential performance increase:
    Can we speed up the computation by combining similar
    pos/dim combinations but different mag, avoiding
    full computation but just perform scalar mult.

    For cuboids this is the same idea as construction
    of the demag tensor.

    its even possible to throw in the scaling property

- Cuboid field performance:
    Distinguish if 1-2 or 3 non-zero magnetizations
    and compute as different instances. This should give
    a speedup of a factor 2 or 3 in most cases !

    maybe not worth it - too many cases, too many masks
    speedup only when n>100 and only when just one mag
    in all other cases there is a loss of speed

    probably requires going deeper and modify equations




DO NOT DO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Sensors should not be part of Collections
WHY?: 
    - questionable practicality
    - Grouping of sensors can be achieved through pos_pix

class BaseSource
	- getB
	- getH
WHY? : This would improve the copy-paste docstring problem, 
	but not allow direct hints what inputs are needed
	in the src.getB() code inspection. For each source
	they can be quite different.


class BaseGeo
	- __add__
WHY? : We dont want __add__ because a sensor inherits BaseGeo
    but it should not be addable to Collections


multidimensional paths .pos() shape = (M1,M2,M3,...,3)
WHY? : This makes no sense when dealing with motions
    when someone want that functionality they can just
    use getBv or scan their surface with a 1D path