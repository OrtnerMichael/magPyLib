discussion -----------------------------------------

- global magnetization ?
    - src.mag=(xxx, localMag=True)
    - src = Box(mag,pos,dim,...,local_mag=True)

- are typehints really helpful for user ?

- scipy update 1.6
    - pylance problem
    - normalized=True weg

- naming: pos_obs or obs_pos
- naming: pos_pix or pix_pos

- remove all input checks ? e.g. check_allowed_keys
    - either make safe or remove all of this code

- unify error msg format
    - ERROR (func): problem is whatever

- sensors to collections !!!!
- proper repr dunder
- is it possible to get rid of (pm,steps=...) argument in motion_merge
2do ----------------------------------------------------------
- obj without path becomes static in evaluation with paths ?

- code: graphic defaults to config
- code: sys_size should incude sys_center for displaced display
- code: .reshape((-1,3)) for paths
    - get rid of protected accesses
    - define _args

- code: context manager tool tip not displaying
- code: check_dupicates might destroy col.sources order
- code: bring edgesize in context with magnetsize
- code: numpy reshape and other operations creating copies
- code: complete type hints

- docu: __init__ docstrings providing brief overviews
- docu: docstring like scipy
- docu: REWORK DOKU
    - link to references / citations
    - 

- dissem: integrate with NumFocus
- dissem: FWF for magpy+MOM+FMM ?

- performance: profile getBH

- math: cel function
        - properly clean up celv
        - provide faster E,K and Pi alternatives
        - provide algorithms for incomplete el for Cylinder tiles !!!
- math: box problem
        - np.log options/alternatives function ?

- tests: H testing against FEM

- code: input checks enable mit config

- code: add remaining sources
	- sphere
	- currents
	- dipole moment
- code add new sources
    - cone
    - arc
    - tile
    - raida source

- errors:
    - throw errors instead of warning+sys.exit()
    - return error codes
    - write tests for errors

.magnet
- Box()
- Cylinder()
- Sphere()

.current
- Line()
- Circular()

code: .misc package
    - Dipole
    - FEM interpolation
    - Virtual field (just a function)

- finally adding sensors and sensor paths to getBv
- getF
- finite sized currents
- optional input type checking

- potential performance increase:
    Can we speed up the computation by combining similar
    pos/dim combinations but different mag, avoiding
    full computation but just perform scalar mult.

    For cuboids this is the same idea as construction
    of the demag tensor.

    its even possible to throw in the scaling property

Cuboid field performance:
    Distinguish if 1-2 or 3 non-zero magnetizations
    and compute as different instances. This should give
    a speedup of a factor 2 or 3 in most cases !

    maybe not worth it - too many cases, too many masks
    speedup only when n>100 and only when just one mag
    in all other cases there is a loss of speed

    probably requires going deeper and modify equations


DONE - NEW FEATURES ------------------------------------
- config
- mag=0 returns 0 now
- edgecases to avoid singularities
- move_to(), move_by()
- 'x', 'y', 'z' as axis arguments in rotate_from_anganx()
- fixed Cylinder field
- fixed Cube field
- getB, getH
- path functionality
    - motion_merge
- complete code vectorization

- new tests
- pylint



DO NOT DO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


class BaseSource
	- getB
	- getH
WHY? : This would improve the copy-paste docstring problem, 
	but not allow direct hints what inputs are needed
	in the src.getB() code inspection. For each source
	they can be quite different.


class BaseGeo
	- __add__
WHY? : We dont want __add__ because a sensor inherits BaseGeo
    but it should not be addable to Collections


multidimensional paths .pos() shape = (M1,M2,M3,...,3)
WHY? : This makes no sense when dealing with motions
    when someone want that functionality they can just
    use getBv or scan their surface with a 1D path